import { createFileRoute } from "@tanstack/react-router";
import { z } from "zod";
export declare const Route: import("@tanstack/router-core").Route<import("@tanstack/router-core").Route<import("@tanstack/router-core").Route<import("@tanstack/react-router").RootRoute<undefined, import("../../__root").RootRouterContext, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, {}, undefined, unknown, unknown>, "", "", "/_authenticated", "/_authenticated", undefined, import("@tanstack/router-core").ResolveParams<"">, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, ({ context }: import("@tanstack/router-core").BeforeLoadContextOptions<import("@tanstack/react-router").RootRoute<undefined, import("../../__root").RootRouterContext, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, {}, undefined, unknown, unknown>, undefined, import("@tanstack/router-core").ResolveParams<"">, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext>) => Promise<void>, {}, () => Promise<void>, unknown, unknown>, "/jobs", "/jobs", "/_authenticated/jobs", "/_authenticated/jobs", undefined, import("@tanstack/router-core").ResolveParams<"/jobs">, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, {}, undefined, unknown, unknown>, "/", "/jobs/", "/_authenticated/jobs/", "/_authenticated/jobs/", z.ZodObject<{
    status: z.ZodOptional<z.ZodEnum<["TO_BE_BUDGETED", "PENDING", "CANCELED", "IN_PROGRESS", "COMPLETED"]>>;
    clientId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status?: "TO_BE_BUDGETED" | "PENDING" | "CANCELED" | "IN_PROGRESS" | "COMPLETED" | undefined;
    clientId?: string | undefined;
}, {
    status?: "TO_BE_BUDGETED" | "PENDING" | "CANCELED" | "IN_PROGRESS" | "COMPLETED" | undefined;
    clientId?: string | undefined;
}>, import("@tanstack/router-core").ResolveParams<"/">, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, {
    status: "TO_BE_BUDGETED" | "PENDING" | "CANCELED" | "IN_PROGRESS" | "COMPLETED" | undefined;
    clientId: string | undefined;
}, ({ deps }: import("@tanstack/router-core").LoaderFnContext<import("@tanstack/router-core").Route<import("@tanstack/router-core").Route<import("@tanstack/react-router").RootRoute<undefined, import("../../__root").RootRouterContext, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, {}, undefined, unknown, unknown>, "", "", "/_authenticated", "/_authenticated", undefined, import("@tanstack/router-core").ResolveParams<"">, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, ({ context }: import("@tanstack/router-core").BeforeLoadContextOptions<import("@tanstack/react-router").RootRoute<undefined, import("../../__root").RootRouterContext, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, {}, undefined, unknown, unknown>, undefined, import("@tanstack/router-core").ResolveParams<"">, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext>) => Promise<void>, {}, () => Promise<void>, unknown, unknown>, "/jobs", "/jobs", "/_authenticated/jobs", "/_authenticated/jobs", undefined, import("@tanstack/router-core").ResolveParams<"/jobs">, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, {}, undefined, unknown, unknown>, "/_authenticated/jobs/", import("@tanstack/router-core").ResolveParams<"/">, {
    status: "TO_BE_BUDGETED" | "PENDING" | "CANCELED" | "IN_PROGRESS" | "COMPLETED" | undefined;
    clientId: string | undefined;
}, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext, import("@tanstack/router-core").AnyContext>) => Promise<{
    jobs: {
        title: string;
        id: string;
        status: "TO_BE_BUDGETED" | "PENDING" | "CANCELED" | "IN_PROGRESS" | "COMPLETED";
        companyId: string;
        createdAt: string;
        updatedAt: string;
        displayId: string;
        description: string;
        price: string;
        startDate: string;
        endDate: string;
        clientId: string;
        createdById: string;
    }[];
    clients: {
        address: {
            street: string;
            city: string;
            state: string;
            zipCode: string;
            country: string;
        };
        name: string;
        id: string;
        email: string;
        companyId: string;
        createdAt: string;
        updatedAt: string;
        phone: string;
        displayId: string;
    }[];
}>, unknown, unknown>;
